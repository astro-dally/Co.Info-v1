"use client"

import type React from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { DollarSign, TrendingUp, BarChart3, PieChart, ChevronDown, ChevronUp, Info } from "lucide-react"
import type { CompanyFinancials } from "@/lib/types"
import { useState } from "react"
import { Tooltip } from './Tooltip'

export default function CompanyFinancials({ financials }: { financials: CompanyFinancials }) {
  const [showAdvanced, setShowAdvanced] = useState(false)

  return (
    <Card className="overflow-hidden border-0 shadow-lg h-full">
      <CardHeader className="bg-gradient-to-r from-blue-600 to-blue-700 text-white">
        <CardTitle className="flex items-center">
          <BarChart3 className="h-5 w-5 mr-2" />
          Financial Overview
        </CardTitle>
      </CardHeader>
      <CardContent className="p-6">
        <div className="space-y-4 mb-6">
          <FinancialMetric
            icon={<DollarSign className="h-4 w-4 text-blue-600 dark:text-blue-400" />}
            title="Valuation"
            value={formatCurrency(financials.marketCap)}
            info="Valuation refers to the process of determining the current worth of an asset or a company."
          />
          <FinancialMetric
            icon={<TrendingUp className="h-4 w-4 text-blue-600 dark:text-blue-400" />}
            title="Revenue (Est.)"
            value={formatCurrency(financials.marketCap * 0.1)} // Using a simple estimation for demo
            info="Revenue is the total amount of income generated by the sale of goods or services."
          />
        </div>

        <button
          onClick={() => setShowAdvanced(!showAdvanced)}
          className="flex items-center text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 text-sm font-medium mt-4 mb-2"
        >
          {showAdvanced ? <ChevronUp className="h-4 w-4 mr-1" /> : <ChevronDown className="h-4 w-4 mr-1" />}
          {showAdvanced ? "Hide" : "Show"} Advanced Financials
        </button>

        {showAdvanced && (
          <div className="border-t border-gray-100 dark:border-gray-700 pt-4 mt-2 space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <FinancialMetric
                icon={<PieChart className="h-4 w-4 text-blue-600 dark:text-blue-400" />}
                title="P/E Ratio"
                value={financials.pe ? financials.pe.toFixed(2) : "N/A"}
                info="P/E Ratio is the ratio for valuing a company that measures its current share price relative to its per-share earnings."
              />
              <FinancialMetric
                icon={<TrendingUp className="h-4 w-4 text-blue-600 dark:text-blue-400" />}
                title="52W High"
                value={`$${financials.yearHigh.toFixed(2)}`}
                info="52W High is the highest price at which a stock has traded during the previous year."
              />
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  )
}

function FinancialMetric({
  icon,
  title,
  value,
  info,
}: {
  icon: React.ReactNode
  title: string
  value: string
  info: string
}) {
  const [showTooltip, setShowTooltip] = useState(false)

  return (
    <div className="bg-gray-50 dark:bg-gray-800 p-4 rounded-lg flex items-start">
      <div className="flex items-center mr-2">
        {icon}
        <span className="ml-1.5 text-sm font-medium text-gray-500 dark:text-gray-400">{title}</span>
      </div>
      <div className="text-gray-900 dark:text-gray-100 font-medium flex-1">{value}</div>
      <div
        className="relative flex items-center cursor-pointer"
        onMouseEnter={() => setShowTooltip(true)}
        onMouseLeave={() => setShowTooltip(false)}
      >
        <Info className="h-4 w-4 text-gray-500 dark:text-gray-400" />
        {showTooltip && (
          <div className="absolute top-full mt-2 left-1/2 transform -translate-x-1/2 bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 text-xs p-3 rounded-lg shadow-lg z-10">
            <div className="absolute top-0 left-1/2 transform -translate-x-1/2 -translate-y-full w-3 h-3 bg-white dark:bg-gray-800 rotate-45"></div>
            {info}
          </div>
        )}
      </div>
    </div>
  )
}

function formatCurrency(value: number): string {
  if (value >= 1e12) {
    return `$${(value / 1e12).toFixed(2)}T`
  } else if (value >= 1e9) {
    return `$${(value / 1e9).toFixed(2)}B`
  } else if (value >= 1e6) {
    return `$${(value / 1e6).toFixed(2)}M`
  } else {
    return `$${value.toFixed(2)}`
  }
}